// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Provides AI-powered product recommendations based on user browsing history.
 *
 * - `getProductRecommendations` - A function that takes user browsing history and returns product recommendations.
 * - `ProductRecommendationsInput` - The input type for the `getProductRecommendations` function.
 * - `ProductRecommendationsOutput` - The return type for the `getProductRecommendations` function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProductRecommendationsInputSchema = z.object({
  browsingHistory: z.array(
    z.string().describe('URL of the product page visited')
  ).describe('The list of URLs representing the user browsing history.'),
});
export type ProductRecommendationsInput = z.infer<typeof ProductRecommendationsInputSchema>;

const ProductRecommendationsOutputSchema = z.object({
  recommendations: z.array(
    z.string().describe('Name of the recommended product')
  ).describe('A list of product recommendations based on browsing history.'),
});
export type ProductRecommendationsOutput = z.infer<typeof ProductRecommendationsOutputSchema>;

export async function getProductRecommendations(input: ProductRecommendationsInput): Promise<ProductRecommendationsOutput> {
  return productRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'productRecommendationsPrompt',
  input: {schema: ProductRecommendationsInputSchema},
  output: {schema: ProductRecommendationsOutputSchema},
  prompt: `Based on the user's browsing history:

  {{#each browsingHistory}}
  - {{this}}
  {{/each}}

  Provide a list of product recommendations the user might be interested in. Return only product names. Do not include any additional information.`,
});

const productRecommendationsFlow = ai.defineFlow(
  {
    name: 'productRecommendationsFlow',
    inputSchema: ProductRecommendationsInputSchema,
    outputSchema: ProductRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
